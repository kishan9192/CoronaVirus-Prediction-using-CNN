# -*- coding: utf-8 -*-
"""Coronavirus Detection

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13eZnYX3ZFDc70ESfZQhLYhIskB7VuXXN
"""

!wget http://cb.lk/covid_19


!unzip covid_19

import numpy as np
import matplotlib.pyplot as plt
import keras
from keras.layers import *
from keras.models import *
from keras.preprocessing import image

# CNN model in keras
# 32 feature extractors initially 
# 224, 224, 3 means height, width, no of channels
# Xray images look b&w, but are RGB, therefore we need 3 channels
# (3,3) feature map size/kernal size/filter size is a default size

model = Sequential()
model.add(Conv2D(32, kernel_size = (3,3), activation = "relu", input_shape = (224, 224, 3)))
model.add(Conv2D(64, (3,3), activation = "relu"))
model.add(MaxPooling2D(pool_size = (2,2)))

# adding dropout to check for overfitting
model.add(Dropout(0.25))

# another conv layer
model.add(Conv2D(64, (3,3), activation = "relu"))
model.add(MaxPooling2D(pool_size = (2,2)))
model.add(Dropout(0.25))


# another conv layer 
model.add(Conv2D(128, (3,3), activation = "relu"))
model.add(MaxPooling2D(pool_size = (2,2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(64, activation = "relu"))
model.add(Dropout(0.5))
model.add(Dense(1, activation = "sigmoid"))

model.compile(loss = keras.losses.binary_crossentropy, optimizer = "adam", metrics = ['accuracy'])

mode.summary()

model.summary()

# Train from scratch

# Image augmentation 
# Training images augmentation
train_datagen = image.ImageDataGenerator(
    rescale = 1./255,
    shear_range = 0.2,
    zoom_range = 0.2,
    horizontal_flip = True,
)

# Test images augmentation
test_dataset = image.ImageDataGenerator(
    rescale = 1./255
)

train_generator = train_datagen.flow_from_directory(
    'CovidDataset/Train',
    target_size = (224, 224),
    batch_size = 32,
    class_mode = 'binary'
)

# to get the classes of the outputs
# 0-> Covid
# 1 -> Normal
train_generator.class_indices

validation_generator = test_dataset.flow_from_directory(
    'CovidDataset/Val',
    target_size = (224, 224),
    batch_size = 32,
    class_mode = 'binary'
)

hist = model.fit_generator(
    train_generator,
    steps_per_epoch = 8,
    epochs = 10,
    validation_data = validation_generator,
    validation_steps = 2
)

# Testing our model on 1 image to make prediction

test_image = image.load_img('testing_image.jpg')
test_image = image.img_to_array(test_image)
test_image.resize(224, 224, 3)
test_image = np.expand_dims(test_image, axis = 0)
res = model.predict(test_image)

print(res)

if res[0][0] == 1:
  prediction = 'Normal'
else:
  prediction = "Corona Positive"

print("The patient is", prediction)